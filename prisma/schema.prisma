// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  password       String?
  image          String?
  role           UserRole         @default(USER)
  organizationId String?
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  dealRooms      DealRoom[]       @relation("DealRoomMembers")
  createdRooms   DealRoom[]
  activities     Activity[]
  timelineEvents TimelineEvent[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  domain      String       @unique
  branding    Json?
  users       User[]
  dealRooms   DealRoom[]
  invitations Invitation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model DealRoom {
  id             String           @id @default(cuid())
  name           String
  description    String?
  status         DealStatus       @default(ACTIVE)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  createdById    String
  createdBy      User            @relation(fields: [createdById], references: [id])
  members        User[]          @relation("DealRoomMembers")
  resources      Resource[]
  activities     Activity[]
  timelineEvents TimelineEvent[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Resource {
  id          String           @id @default(cuid())
  name        String
  type        String
  url         String
  contentType String?
  dealRoomId  String
  dealRoom    DealRoom         @relation(fields: [dealRoomId], references: [id])
  activities  Activity[]
  timelineEvents TimelineEvent[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           UserRole
  token          String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Activity {
  id          String     @id @default(cuid())
  type        String
  dealRoomId  String
  dealRoom    DealRoom   @relation(fields: [dealRoomId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  resourceId  String?
  resource    Resource?  @relation(fields: [resourceId], references: [id])
  metadata    Json?
  createdAt   DateTime   @default(now())
}

model TimelineEvent {
  id          String            @id @default(cuid())
  type        TimelineEventType
  title       String
  description String?
  metadata    Json?
  isInternal  Boolean          @default(false)
  dealRoomId  String
  dealRoom    DealRoom         @relation(fields: [dealRoomId], references: [id])
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  resourceId  String?
  resource    Resource?        @relation(fields: [resourceId], references: [id])
  createdAt   DateTime         @default(now())
}

enum UserRole {
  ADMIN
  USER
}

enum DealStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum TimelineEventType {
  DEAL_CREATED
  STATUS_CHANGE
  RESOURCE_ADDED
  RESOURCE_REMOVED
  MEMBER_ADDED
  MEMBER_REMOVED
  MEETING_SCHEDULED
  MEETING_COMPLETED
  EMAIL_SENT
  EMAIL_RECEIVED
  NOTE_ADDED
  MILESTONE_REACHED
  TASK_COMPLETED
}